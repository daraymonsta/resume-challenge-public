name: Get Static Website Azure Nameservers

# Controls when the workflow will run
on:
  # Allows this workflow to be called from a caller workflow
  workflow_call:
    secrets:
      AZURE_SUB_CREDENTIALS:
        required: true
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: JSON to variables
        uses: antifree/json-to-variables@v1.0.1
        with:
          filename: './back-end/arm-templates/azuredeploy.parameters.json'
          prefix: fromjson
          
      - name: Show output
        run: |
          echo "The resource group is ${{ env.fromjson_parameters_resource_group_value }}"
          echo "The region is ${{ env.fromjson_parameters_cosmos_db_account_name_value }}"
          echo "The function app name is ${{ env.fromjson_parameters_function_app_name_value }}"
      
      - name: Add Env DOMAIN1 variable
        id: addEnv
        run: |
          customDomain1="${{ env.fromjson_parameters_endpointName_value }}.${{ env.fromjson_parameters_dnszone_topleveldomain_name_value }}"
          echo $customDomain1
          echo "DNSZONE=$customDomain1" >> $GITHUB_ENV
      
      # Logs into Azure with GitHub secret
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SUB_CREDENTIALS }}
              
      - name: Save DNS Zone JSON to File
        id: saveJSON
        run: |
          az network dns record-set ns list -g ${{ env.fromjson_parameters_resource_group_value }} -z $DNSZONE > dnszone.json

      - name: Run Python to Print Nameservers
        uses: jannekem/run-python-script-action@v1
        id: getNameservers
        with:
          fail-on-error: false
          script: |
            import json
            with open("dnszone.json") as jsonFile:
              temp_json = json.load(jsonFile)
              jsonFile.close()
            for x in range(4):
              print(temp_json[0]["nsRecords"][x]["nsdname"])
            
      - name: Print Nameservers
        if: steps.getNameservers.outputs.error == 'false'
        run: |
          echo "Nameservers:"
          printenv "SCRIPT_STDOUT"
        env:
          SCRIPT_STDOUT: ${{ steps.getNameservers.outputs.stdout }}
          
      # Azure logout
      - name: logout
        run: |
            az logout
        if: always()
