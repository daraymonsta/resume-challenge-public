# This is a basic workflow to help you get started with Actions

name: Enable HTTPS on Custom Domain

# Controls when the workflow will run
on: 
  # Allows this workflow to be called from a caller workflow
  workflow_call:
    secrets:
      AZURE_SUB_CREDENTIALS:
        required: true

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: JSON to variables
        uses: antifree/json-to-variables@v1.0.1
        with:
          filename: './back-end/arm-templates/azuredeploy.parameters.json'
          prefix: fromjson
          
      - name: Show output
        run: |
          echo "The resource group is ${{ env.fromjson_parameters_resource_group_value }}"
          echo "The cdn profile name is ${{ env.fromjson_parameters_cdn_profile_name_value }}"
          echo "The cdn endpoint name is ${{ env.fromjson_parameters_endpointName_value }}"
          echo "Top level domain name is ${{ env.fromjson_parameters_dnszone_topleveldomain_name_value }}"

      - name: Add Env DOMAIN1 variable
        id: addEnv
        run: |
          customDomain1="www-${{ env.fromjson_parameters_endpointName_value }}-${{ env.fromjson_parameters_dnszone_topleveldomain_name_value }}"
          echo $customDomain1
          echo "DOMAIN1=$customDomain1" >> $GITHUB_ENV

      # Logs into Azure with GitHub secret
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SUB_CREDENTIALS }}  
          
      - name: Save custom domain JSON to File
        id: saveResponse
        run: |
          az cdn custom-domain show -g ${{ env.fromjson_parameters_resource_group_value }} --endpoint-name ${{ env.fromjson_parameters_endpointName_value }} --profile-name ${{ env.fromjson_parameters_cdn_profile_name_value }} -n $DOMAIN1 > status.json
          echo "Response from CLI command..."
          cat status.json
          
      - name: Run Python script
        uses: jannekem/run-python-script-action@v1
        id: getStatus
        with:
          fail-on-error: false
          script: |
            import json
            with open("status.json") as jsonFile:
              temp_json = json.load(jsonFile)
              jsonFile.close()
            if temp_json["customHttpsProvisioningState"] == "Enabling" or temp_json["customHttpsProvisioningState"] == "Enabled":
                print('True')
            else:
                print('False')
      
      - name: Remove carriage return from output
        id: trimmedOutput
        run: |
          MY_STRING=${{ steps.getStatus.outputs.stdout }}
          MY_STRING="${MY_STRING//$'\n'/''}"
          MY_STRING="${MY_STRING//$'\r'/''}"
          echo "::set-output name=content::$MY_STRING"
      
      - name: Enable HTTPS if False
        if: steps.trimmedOutput.outputs.content == 'False'
        run: |
          echo "HTTPS is not enabled."
          echo "Running command to Enable HTTPS..."
          az cdn custom-domain enable-https -g ${{ env.fromjson_parameters_resource_group_value }} --profile-name ${{ env.fromjson_parameters_cdn_profile_name_value }} --endpoint-name ${{ env.fromjson_parameters_endpointName_value }} -n $DOMAIN1
      
      - name: Display msg if True
        if: steps.trimmedOutput.outputs.content == 'True'
        run: |
          echo "HTTPS is already enabled. No need to enable."
          
      # Azure logout
      - name: logout
        run: |
            az logout
        if: always()
