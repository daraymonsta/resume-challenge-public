# This script deploys Azure services via ARM templates, and deploys the GitHub code to the Azure Function App

name: Deploy Back-end CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for changes to the "back-end/arm-templates" folder of the main branch
  #push:
  #  branches: [ main ]
  #  paths: back-end/**
  #pull_request:
  #  branches: [ main ]
  #  paths: back-end/**

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'back-end/func-app-visitor-api/.' # path to App Function code

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # validates the ARM templates
  validateARM:
    name: ARM Template Validations
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: JSON to variables
        uses: antifree/json-to-variables@v1.0.1
        with:
          filename: './back-end/arm-templates/azuredeploy.parameters.json'
          prefix: fromjson
          
      - name: Show output
        run: |
          echo "The resource group is ${{ env.fromjson_parameters_resource_group_value }}"
          echo "The region is ${{ env.fromjson_parameters_region_value }}"
      
      # Functional verification of ARM templates without connecting to Azure
      - name: ARM Template Toolkit (ARM TTK) Validation
        id: armttkvalidation
        uses: aliencube/arm-ttk-actions@v0.3
        with:
          path: ./back-end/arm-templates
          skips: '"apiVersions Should Be Recent"'
          
      - name: Display Test Result
        shell: bash
        continue-on-error: true
        run: |
          echo "${{ toJSON(fromJSON(steps.armttkvalidation.outputs.results)) }}"

      # Logs into Azure with GitHub secret
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SUB_CREDENTIALS }}
          
      - name: Azure CLI script - Create Resource Group
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az group create --name ${{ env.fromjson_parameters_resource_group_value }} --location ${{ env.fromjson_parameters_region_value }}
      
      - name: Validate ARM Template
        uses: Azure/arm-deploy@v1
        with:
          scope: resourcegroup
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTIONID }}
          region: ${{ env.fromjson_parameters_region_value }}
          resourceGroupName: ${{ env.fromjson_parameters_resource_group_value }}
          template: back-end/arm-templates/azuredeploy.json
          deploymentMode: Validate
          parameters: back-end/arm-templates/azuredeploy.parameters.json
      
      - name: Upload Template as Build Artifact
        uses: actions/upload-artifact@v2.2.2
        with:
          name: ResumeBackendTemplate
          # A file, directory or wildcard pattern that describes what to upload
          path: back-end/arm-templates/*
          if-no-files-found: error

  # deploys backend infrastructure using build artifact already validated + uploaded to Azure
  deployARM:
    name: Deploy ARM Templates
    if: github.event.ref == 'refs/heads/main'
    needs: [validateARM]
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: JSON to variables
        uses: antifree/json-to-variables@v1.0.1
        with:
          filename: './back-end/arm-templates/azuredeploy.parameters.json'
          prefix: fromjson
          
      - name: Show output
        run: |
          echo "The resource group is ${{ env.fromjson_parameters_resource_group_value }}"
          echo "The region is ${{ env.fromjson_parameters_region_value }}"

      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.0.8
        with:
          name: ResumeBackendTemplate

      # Logs into Azure with GitHub secret
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SUB_CREDENTIALS }}
                    
      - name: Deploy ARM Template
        id: deployarmtemplate
        uses: Azure/arm-deploy@v1
        with:
          scope: resourcegroup
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTIONID }}
          region: ${{ env.fromjson_parameters_region_value }}
          resourceGroupName: ${{ env.fromjson_parameters_resource_group_value }}
          template: azuredeploy.json
          deploymentMode: Incremental
          parameters: azuredeploy.parameters.json

      # Azure logout
      - name: logout
        run: |
            az logout
        if: always()
        
  # deploys the code on GitHub repo to Azure function app
  deployCode:
    name: Deploy code to App
    if: github.event.ref == 'refs/heads/main'
    needs: [deployARM]  
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: JSON to variables
        uses: antifree/json-to-variables@v1.0.1
        with:
          filename: './back-end/arm-templates/azuredeploy.parameters.json'
          prefix: fromjson
          
      - name: Show output
        run: |
          echo "The function app name is ${{ env.fromjson_parameters_function_app_name_value }}"
          echo "The python version is ${{ env.fromjson_parameters_pythonVersion_value }}"

      # Logs into Azure with GitHub secret
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SUB_CREDENTIALS }}
      
      - name: Setup Python 3.9 Environment
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.fromjson_parameters_pythonVersion_value }}
          
      - name: Resolve Project Dependencies Using Pip
        shell: bash
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          python -m pip install --upgrade pip
          pip install -r requirements.txt --target=".python_packages/lib/site-packages"
          popd
      
      - name: Run Azure Functions Action
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ env.fromjson_parameters_function_app_name_value }}
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          
      # Azure logout
      - name: logout
        run: |
            az logout
        if: always()
  
  # calls the workflow front-deploy while implicitly passing any secrets from this caller workflow
  callFrontDeploy:
    needs: [deployARM]   # once ARM templates have deployed services, the front end can be deployed
    uses: ./.github/workflows/front-deploy.yml
    secrets: inherit
  
  # calls the workflow cdn-enable-https while implicitly passing any secrets from this caller workflow
  callEnableHTTPS:
    needs: [deployARM]   # once ARM templates have deployed services, the front end can be deployed
    uses: ./.github/workflows/cdn-enable-https.yml
    secrets: inherit
  
  # sets the Application Settings and Connection String in the App Function
  setAppSettings:
  
    name: Set Application Settings
    if: github.event.ref == 'refs/heads/main'
    needs: [deployCode]  
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: JSON to variables
        uses: antifree/json-to-variables@v1.0.1
        with:
          filename: './back-end/arm-templates/azuredeploy.parameters.json'
          prefix: fromjson
          
      - name: Show output
        run: |
          echo "The resource group is ${{ env.fromjson_parameters_resource_group_value }}"
          echo "The region is ${{ env.fromjson_parameters_cosmos_db_account_name_value }}"
          echo "The function app name is ${{ env.fromjson_parameters_function_app_name_value }}"
      
      # Logs into Azure with GitHub secret
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SUB_CREDENTIALS }}
              
      - name: Save Connection String to File
        id: saveconnectionstr
        run: |
          echo "[" > output.json
          az cosmosdb keys list --name ${{ env.fromjson_parameters_cosmos_db_account_name_value }} --resource-group ${{ env.fromjson_parameters_resource_group_value }} --type connection-strings >> output.json
          echo "]" >> output.json

      - name: Get Nested Property
        id: extractfromfile
        uses: notiz-dev/github-action-json-property@release
        with: 
            path: 'output.json'
            prop_path: '0.connectionStrings.0.connectionString'
        
      - run: echo ${{steps.extractfromfile.outputs.prop}} 

      - name: Run Python to Output Endpoint
        uses: jannekem/run-python-script-action@v1
        id: getendpoint
        with:
          fail-on-error: false
          script: |
            prim_conn_str = "${{steps.extractfromfile.outputs.prop}}"
            conn_str_list = prim_conn_str.split(';')
            account_endpoint = conn_str_list[0].split("AccountEndpoint=",1)[1]
            print(account_endpoint)
            
      - name: Print Python output
        if: steps.getendpoint.outputs.error == 'false'
        run: |
          printenv "SCRIPT_STDOUT"
        env:
          SCRIPT_STDOUT: ${{ steps.getendpoint.outputs.stdout }}

      - name: Run Python to Output Key
        uses: jannekem/run-python-script-action@v1
        id: getkey
        with:
          fail-on-error: false
          script: |
            prim_conn_str = "${{steps.extractfromfile.outputs.prop}}"
            conn_str_list = prim_conn_str.split(';')
            account_key = conn_str_list[1].split("AccountKey=",1)[1]
            print(account_key)
            
      - name: Print Python output
        if: steps.getkey.outputs.error == 'false'
        run: |
          printenv "SCRIPT_STDOUT"
        env:
          SCRIPT_STDOUT: ${{ steps.getkey.outputs.stdout }}

      - name: Add Application Settings
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az webapp config connection-string set -g ${{ env.fromjson_parameters_resource_group_value }} -n ${{ env.fromjson_parameters_function_app_name_value }} -t Custom \
              --settings AzureCosmosDBConnectionString='${{steps.extractfromfile.outputs.prop}}'
            az functionapp config appsettings set --name ${{ env.fromjson_parameters_function_app_name_value }} --resource-group ${{ env.fromjson_parameters_resource_group_value }} --settings "AzureCosmosDBAccountEndpoint=${{ steps.getendpoint.outputs.stdout }}"
            az functionapp config appsettings set --name ${{ env.fromjson_parameters_function_app_name_value }} --resource-group ${{ env.fromjson_parameters_resource_group_value }} --settings "AzureCosmosDBAccountKey=${{ steps.getkey.outputs.stdout }}"

      # Azure logout
      - name: logout
        run: |
            az logout
        if: always()
